<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 波波沙🏠</title>
    <link>https://pps43.github.io/posts/</link>
    <description>Recent content in Posts on 波波沙🏠</description>
    <generator>Hugo -- 0.146.5</generator>
    <language>en</language>
    <copyright>2016-2023 By 波波沙.</copyright>
    <lastBuildDate>Sun, 10 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://pps43.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wisdom of Software Engineering</title>
      <link>https://pps43.github.io/posts/thinking_of_software_engineering/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_software_engineering/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本篇着重于收集编程和软件工程中的洞察和智慧，大部分来自业内顶尖的前辈，例如&lt;code&gt;Joel Spolsky&lt;/code&gt;, &lt;code&gt;John Carmack&lt;/code&gt;等等，也有个人的思考。当我这些年经历过不同行业、国内外不同公司、不同技术栈后，在真正认同这些观点对于产能带来多大提升的同时，也发现它们是多么容易被忽略。总结在这里，常看常新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你想活出怎样的人生（吉野源三郎）</title>
      <link>https://pps43.github.io/posts/notes_on_how_you_live_your_life/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_how_you_live_your_life/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/posts/notes_on_genius_in_ghibli/&#34;&gt;之前&lt;/a&gt;曾提到过，这本写于1937年的书曾经入选日本教材，并影响了宫崎骏一生的轨迹。他曾写文解释这本书如何触发他思考当时的社会以及未来的世界：（这本书）传达出一个讯息，那就是&lt;strong&gt;无论处在多么艰困的时代或是残酷的时代，都要活的像一个人&lt;/strong&gt;。我读后深感这虽是一本写给少年的读物，读起来很轻快，却非常深刻隽永，令人动容。合上书页，我仿佛也看到那远方的天空、无尽的人们。&lt;/p&gt;
&lt;p&gt;“&lt;strong&gt;要成为能帮助世界进步的人&lt;/strong&gt;（Make the world a better place）”——我再次坚定了内心的信念。&lt;/p&gt;
&lt;p&gt;相信这本书会一直流传下去。&lt;a href=&#34;https://book.douban.com/subject/34659228/&#34;&gt;豆瓣读书&lt;/a&gt;, &lt;a href=&#34;https://www.goodreads.com/book/show/34762989&#34;&gt;GoodReads&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;舅舅的笔记片段1&#34;&gt;舅舅的笔记片段1&lt;/h2&gt;
&lt;p&gt;所有小孩子的想法都不像地动说，而像天动说。请你观察小孩的知识，他们一切都以自己为中心。电车轨道在我们家左边，邮筒在我们家右边，菜贩在弯进转角的地方。静子家在我们家对面，阿三家在我们家隔壁。小孩子的想法就像这样，一切都以自己家为中心。人是其他人的过程也一样，例如那是我爸爸的同事、这是我妈妈的亲戚……长大之后，想法或多或少的会慢慢接近地动说……人习惯以自己为中心思考、判断事物；即使长大了，这种特性同样根深柢固。等你长大了就会明白，&lt;strong&gt;在广大的世界上，能完全改掉以自己为中心思考的习惯的人，其实非常稀少。尤其碰到事关利害得失的时候，要跳脱自己的立场作出正确的判断，实在很难&lt;/strong&gt;。面对利害得失如果还能抱持像哥白尼那样的想法，可说是非常了不起。……如果人一直坚信地球是宇宙的中心，恐怕就无法了解宇宙真正的样貌，同样地，总是以自我为中心判断事物，也会让人不了解周遭事物的真相。这种人一定看不清重大的真理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于使用AI的小思考</title>
      <link>https://pps43.github.io/posts/thinking_of_ai/</link>
      <pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_ai/</guid>
      <description>&lt;p&gt;最近一两年，用AI的方式变化得太快了。每当我指望它“一次给出完美答案”，十有八九会失望；可当我把任务拆成几步，允许它犯错、允许我随时插话校准，结果反而稳、而且更快。这件小事让我意识到：&lt;strong&gt;我们真正迫切需要的，或许不只是“更强的模型”，而是“更好的协作方式”&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件的未来</title>
      <link>https://pps43.github.io/posts/thinking_of_software/</link>
      <pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_software/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;近期看了一些大佬对AI时代软件形态的探讨，记录一些感悟。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写软件不再只是程序员可以做的酷酷的事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过去几十年的发展，“机器”的形态发生了巨大变化，现在，LLM本身也变成了“机器”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thinking of Quality Design</title>
      <link>https://pps43.github.io/posts/thinking_of_quality_design/</link>
      <pubDate>Mon, 05 May 2025 20:41:35 +0800</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_quality_design/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;🍎本文源自对Apple WWDC 2018 的一次公开分享的记录提炼。什么是优秀的设计，它为什么重要，如何追求品质感……这些话题不仅是设计师需要考虑的专业问题，也是每个人打造自己的生活需要知道的内在规律。&lt;a href=&#34;https://developer.apple.com/cn/videos/play/wwdc2018/801/&#34;&gt;Video&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebGL平台的性能限制和解决方案（以微信小游戏为例）</title>
      <link>https://pps43.github.io/posts/unite2024_wechatminigame/</link>
      <pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/unite2024_wechatminigame/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前几日参加了Unite上海2024，受益颇多。本篇先就相对感兴趣的小游戏平台WebGL技术方案为引子，引出一些关于WebAssembly, IL2CPP, 以及.NET 8对Web平台支持等话题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>带物理交互的CharacterController设计与实现</title>
      <link>https://pps43.github.io/posts/notes_on_physics_based_cct/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_physics_based_cct/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文也是&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;的番外篇。介绍了笔者基于CharacterController(CCT)设计的一个新的角色控制器，在修补Unity/PhysX的CCT的缺陷外，还增添了若干和物理交互相关的有趣特性。代码已经过实际项目验证，这里仅保留和具体业务无关的部分。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;背景和需求&#34;&gt;背景和需求&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/posts/using_physx_cct/&#34;&gt;前文&lt;/a&gt;结尾处提到一些PhysX自带的CCT（Unity也是基于此二次封装出&lt;code&gt;CharacterController&lt;/code&gt;组件）在实际游戏开发中的缺点，这里再次总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CCT不参与碰撞系统的检测&lt;/strong&gt;。仅当CCT自身移动时会判断是否被其他刚体或CCT阻挡。这就造成一个BUG：CCT自身静止时，其他运动物体会穿过CCT且没有事件触发。&lt;a href=&#34;https://discussions.unity.com/t/proper-collision-detection-with-charactercontroller/564371&#34;&gt;官方论坛上有苦主&lt;/a&gt;持续8年向Unity反馈这个问题但无法解决，目前已知的唯一绕过方式是每帧给CCT附加一个微小的位移（下文中的&lt;code&gt;SlightMove&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unity提供的接口&lt;code&gt;CharacterController.isGrounded&lt;/code&gt;效果很不稳定&lt;/strong&gt;。其内部只是判断CCT上次运动后底部是否触碰物体。即&lt;code&gt;collisionFlags &amp;amp; eCOLLISION_DOWN::eCOLLISION_DOWN&lt;/code&gt;。但在上下坡或崎岖地形时，很容易出现侧面触碰或短暂浮空。如果用该接口驱动动画表现甚至跑跳逻辑，效果很差。需要自行基于SceneQuery封装出更加稳定的判定着地的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unity没有暴露&lt;code&gt;CCT.upVector&lt;/code&gt;，角色总是竖直向上的&lt;/strong&gt;。要实现反重力鞋在任意斜面上行走或像&lt;code&gt;马里奥银河&lt;/code&gt;那样在曲面上跑跳穿梭，只能放弃使用CCT但也放弃了其在操作手感上的改善。其实拿到Unity的源码后，只用了十分钟将底层字段暴露到C#层就解决了该问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的角色控制器需要增加的物理交互特性有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhysX物理引擎（4）Character Controller</title>
      <link>https://pps43.github.io/posts/using_physx_cct/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_physx_cct/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要介绍PhysX角色控制器相关的内部机制和使用方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;记录了在实际项目中使用Nvdia PhysX 3.4物理引擎（&lt;a href=&#34;https://github.com/pps43/PhysX-3.4&#34;&gt;Code&lt;/a&gt;, &lt;a href=&#34;https://github.com/pps43/PhysX-3.4/raw/master/PhysX_3.4/Documentation/PhysXGuide.chm&#34;&gt;Doc&lt;/a&gt;）的一些经验，有不少对官方资料的补充。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;warm-up&#34;&gt;Warm-up&lt;/h1&gt;
&lt;p&gt;Character Controller (a.k.a CCT) is a special physical object handling player movement. In PhysX, CCT is not a Rigidbody, which means it does not integrate seamlessly in collision system. However, there is a kinematic actor underlying in CCT, and you can attach custom data via &lt;code&gt;PxController::getActor()-&amp;gt;userData&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhysX物理引擎（3）Rigidbody Dynamics</title>
      <link>https://pps43.github.io/posts/using_physx_rigidbody/</link>
      <pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_physx_rigidbody/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要介绍PhysX刚体动力学相关的内部机制和使用方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;记录了在实际项目中使用Nvdia PhysX 3.4物理引擎（&lt;a href=&#34;https://github.com/pps43/PhysX-3.4&#34;&gt;Code&lt;/a&gt;, &lt;a href=&#34;https://github.com/pps43/PhysX-3.4/raw/master/PhysX_3.4/Documentation/PhysXGuide.chm&#34;&gt;Doc&lt;/a&gt;）的一些经验，有不少对官方资料的补充。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;warm-up&#34;&gt;Warm-up&lt;/h1&gt;
&lt;p&gt;We already know that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kinematic&lt;/code&gt; and &lt;code&gt;Dynamic&lt;/code&gt; rigidbody are both &lt;code&gt;PxRigidDynamic&lt;/code&gt; in PhysX. Use &lt;code&gt;PxRigidBody::setRigidBodyFlag(PxRigidBodyFlag::eKINEMATIC, true)&lt;/code&gt; to turn a dynamic actor into kinematic at runtime, and vice versa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kinematic&lt;/code&gt; and &lt;code&gt;Static&lt;/code&gt; actors always stay in the same location unless you move them in your code.&lt;/li&gt;
&lt;li&gt;When moving &lt;code&gt;Static&lt;/code&gt; actors, their collisions with dynamic actors can be wrong.&lt;/li&gt;
&lt;li&gt;When moving &lt;code&gt;Kinematic&lt;/code&gt; actors, you should always use &lt;code&gt;PxRigidDynamic::setKinematicTarget&lt;/code&gt; in each frame rather than &lt;code&gt;PxRigidActor::setGlobalPose&lt;/code&gt; to achieve correct collisions with other dynamic actors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post we focus on dynamic rigidbody movement, e.g., &lt;strong&gt;force and torque, gravity, sleeping&lt;/strong&gt; and so on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhysX物理引擎（2）Collision</title>
      <link>https://pps43.github.io/posts/using_physx_collision/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_physx_collision/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要介绍PhysX碰撞检测的一些内部机制和使用方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;记录了在实际项目中使用Nvdia PhysX 3.4物理引擎（&lt;a href=&#34;https://github.com/pps43/PhysX-3.4&#34;&gt;Code&lt;/a&gt;, &lt;a href=&#34;https://github.com/pps43/PhysX-3.4/raw/master/PhysX_3.4/Documentation/PhysXGuide.chm&#34;&gt;Doc&lt;/a&gt;）的一些经验，有不少对官方资料的补充。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;warm-up&#34;&gt;Warm-up&lt;/h1&gt;
&lt;h2 id=&#34;static-kinematic--dynamic&#34;&gt;Static, Kinematic &amp;amp; Dynamic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Static colliders are non-movable. In fact, they are not rigidbody, just &lt;code&gt;PxRigidStatic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Kinematic and  dynamic rigidbody are both &lt;code&gt;PxRigidDynamic&lt;/code&gt;, and can switch to each other at runtime by &lt;code&gt;setRigidBodyFlag(PxRigidBodyFlag::eKINEMATIC, true/false)&lt;/code&gt;. The biggest difference is that kinematic rigidbody behaves like infinite mass, and will not move by external force. Instead, you call &lt;code&gt;MovePosition&lt;/code&gt; on it.&lt;/li&gt;
&lt;li&gt;Dynamic rigidbody is the only type we can &lt;code&gt;AddForce&lt;/code&gt; to, which has mass, center of mass, and inertia tensor to simulate a natural movement with Newton&amp;rsquo;s laws of motion.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;classDiagram

PxRigidActor &amp;lt;-- PxRigidStatic
PxRigidActor &amp;lt;-- PxRigidBody
PxRigidBody &amp;lt;-- PxRigidDynamic
PxRigidActor *.. PxShape

class PxRigidBody {
    PxRigidBodyFlag
}
class PxShape {
    PxShapeFlag
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We cannot make a rigidbody without a shape. Shapes are tangible, with a real size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入 LossyScale</title>
      <link>https://pps43.github.io/posts/thinking_of_lossyscale/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_lossyscale/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;的番外篇，其实要弄明白一个3D数学问题：如何处理父节点带有非均匀缩放和旋转时，子节点的最终大小和形态。
问题源自笔者在修改物理引擎为其添加&lt;code&gt;scale&lt;/code&gt;属性时遇到的一个bug。解决后对&lt;code&gt;WorldScale&lt;/code&gt;为什么叫做&lt;code&gt;LossyScale&lt;/code&gt;、空间变换和基变换有了更深的理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>吉卜力的天才们（铃木敏夫）</title>
      <link>https://pps43.github.io/posts/notes_on_genius_in_ghibli/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_genius_in_ghibli/</guid>
      <description>&lt;p&gt;这本书带给我的，除了诸多耳熟能详的作品背后的逸闻趣事、诸位大师的才华风貌，还有不少对创作思路、团队协作、宣传发行的启发，相信能常看常新。同时这本书里记录的东西，让人有一种难以名状的触动。一定要形容的话，可以说&lt;strong&gt;是一种谁也抑制不了的、忍不住要生长的气魄&lt;/strong&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhysX零值Crash</title>
      <link>https://pps43.github.io/posts/using_physx_solving_zero_value_crash/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_physx_solving_zero_value_crash/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;的特别篇，记录了影响近一周的物理引擎底层概率性Crash的定位过程和修复方法，具有&lt;strong&gt;很高&lt;/strong&gt;的实践参考价值。&lt;em&gt;“有多高？”“三四层楼那么高啦！”&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;发现问题&#34;&gt;发现问题&lt;/h1&gt;
&lt;p&gt;运维同事发现体验服和某区在新版本上线一小段时间后，会出现概率不高但持续出现的进程Crash。这里先简单说明一下：我们会在一台机器上部署多个GameServer实例，每个GameServer实例进程同时进行着多场不同的Match，如果某一场Match出现了业务层Crash，并不会影响其他Match。但如果是C++物理库内出现Crash，则会同时中止其他正常运行的Match，对玩家的影响较大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>洞见·为什么佛学是真的</title>
      <link>https://pps43.github.io/posts/notes_on_why_buddhism_is_true/</link>
      <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_why_buddhism_is_true/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;当看到书名时，我承认内心有一丝挑战欲。受过系统的科研训练的人，往往对“真的”有“洁癖”。作者&lt;code&gt;Robert Wright&lt;/code&gt;也认识到这一点，所以在开头便说，本书可以看作佛学观点的&lt;strong&gt;进化心理学&lt;/strong&gt;解释。并不探讨轮回、神明这些超自然的部分，而探讨自然主义部分。并不探讨佛教各分支的细枝末节，而探讨核心思想。&lt;strong&gt;不要用佛教教义使自己成为更好的佛教徒，用它来做更好的自己&lt;/strong&gt;。正是这句话让我有了继续读下去的意愿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PhysX物理引擎（1）Scene Query</title>
      <link>https://pps43.github.io/posts/using_physx_scenequery/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_physx_scenequery/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要介绍PhysX场景查询的一些内部机制和使用方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/tags/physx/&#34;&gt;PhysX物理引擎系列&lt;/a&gt;记录了在实际项目中使用Nvdia PhysX 3.4物理引擎（&lt;a href=&#34;https://github.com/pps43/PhysX-3.4&#34;&gt;Code&lt;/a&gt;, &lt;a href=&#34;https://github.com/pps43/PhysX-3.4/raw/master/PhysX_3.4/Documentation/PhysXGuide.chm&#34;&gt;Doc&lt;/a&gt;）的一些经验，有不少对官方资料的补充。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;warm-up&#34;&gt;Warm-up&lt;/h1&gt;
&lt;p&gt;A &lt;code&gt;Scene&lt;/code&gt; in PhysX engine is a container of objects in a hierachical manner.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;---
title: Scene Hierachy
---
classDiagram
direction LR

class world
class scene {
    Flags
    Gravity
    ...
}
class actor {
    ActorFlags
    Name
    GlobalPose
    ...
}
class shape {
    Flags
    GeometryType
    LocalPose
    QueryFilterData
    SimulationFilterData
    ...
}
class geometry {
    ...
}
class material {
    friction
    restitution
    damping
}

world &amp;#34;1&amp;#34;*.. &amp;#34;N&amp;#34;scene
scene &amp;#34;1&amp;#34;*.. &amp;#34;N&amp;#34;actor
actor &amp;#34;1&amp;#34;*.. &amp;#34;N&amp;#34;shape
shape o--geometry
shape o--material
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are only position and rotation in &lt;code&gt;GlobalPose&lt;/code&gt; and &lt;code&gt;LocalPose&lt;/code&gt;, no &amp;ldquo;scale&amp;rdquo;. Scale only reflects on geometry&amp;rsquo;s actual size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>跟AI老师学AI（2）</title>
      <link>https://pps43.github.io/posts/asking_ai_about_ai_2/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/asking_ai_about_ai_2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pps43.github.io/posts/asking_ai_about_ai/&#34;&gt;上一篇&lt;/a&gt;我们聊了AI模型的分类和大致架构，目前最火的两类模型&lt;code&gt;LLM&lt;/code&gt;和&lt;code&gt;Diffusion&lt;/code&gt;都基于&lt;code&gt;Transformer&lt;/code&gt;架构训练而成，&lt;code&gt;ChatGPT&lt;/code&gt;则是&lt;code&gt;LLM&lt;/code&gt;家族中最出色的产品。本文就来聊聊最近出现的基于&lt;code&gt;ChatGPT&lt;/code&gt;的创新架构和应用。由于&lt;code&gt;ChatGPT&lt;/code&gt;的训练数据截止到2021年9月，且笔者并没有Plus会员才能使用的&lt;code&gt;ChatGPT Plugin&lt;/code&gt;，所以这次请到的是&lt;a href=&#34;https://www.phind.com/&#34;&gt;Dr. Phind&lt;/a&gt;（The AI search engine for developers），大家欢迎。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;系列文章&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pps43.github.io/posts/asking_ai_about_ai/&#34;&gt;跟AI老师学AI（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pps43.github.io/posts/asking_ai_about_ai_2/&#34;&gt;跟AI老师学AI（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;课堂问答&#34;&gt;课堂问答&lt;/h1&gt;
&lt;h2 id=&#34;auto-gpt&#34;&gt;Auto-GPT&lt;/h2&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;what is autogpt and how does it work&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Dr. Phind:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Significant-Gravitas/Auto-GPT&#34;&gt;Auto-GPT&lt;/a&gt; is an experimental open-source project built on the latest ChatGPT model i.e GPT-4. It is a variant of ChatGPT developed by Significant Gravitas and it uses the ChatGPT API to work. Specifically, Auto-GPT utilizes the GPT-4 API, though it seems like it should work with the GPT-3.5 API as well. &lt;strong&gt;Auto-GPT is an AI that does the work for you by setting a goal and then generating and completing tasks&lt;/strong&gt;. It does all the follow-up work for you, asking and answering its own prompts. It automates multi-step projects that would have required back-and-forth prompting if you worked directly with GPT-4. In other words, it &lt;strong&gt;&amp;ldquo;chains together LLM &amp;rsquo;thoughts&amp;rsquo;, to autonomously achieve whatever goal you set.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>跟AI老师学AI（1）</title>
      <link>https://pps43.github.io/posts/asking_ai_about_ai/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/asking_ai_about_ai/</guid>
      <description>&lt;p&gt;按照目前AI在学术界、工业界推陈出新的速度，感兴趣的同学们纷纷表示：真的学不动啦！不要慌，AI老师来了~ 在本系列中，我不会提前学习预备知识，以门外汉的视角去追问AI并了解一些基本概念。既可以锻炼提问技巧，还可以在听完高屋建瓴的讲解后有针对性的去学习感兴趣的部分，效率倍增！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative AI Toolkit (5.12)</title>
      <link>https://pps43.github.io/posts/ai_toolkit_for_dev/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/ai_toolkit_for_dev/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;There are decades where nothing happens; and there are weeks where decades happen.&amp;rdquo;
― Vladimir Lenin&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;基于大语言模型的AI在这个月带给人们的感受，用列宁的这句话概括再贴切不过了。作为普通人，去拥抱这些AI工具，就像会使用智能手机和搜索引擎；对人类来说，就像学会用电，学会用火。&lt;/p&gt;</description>
    </item>
    <item>
      <title>凤凰项目</title>
      <link>https://pps43.github.io/posts/notes_on_phoenix_project/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_phoenix_project/</guid>
      <description>&lt;p&gt;市面上以DevOps为主题的书，以及和项目攻关的影视作品有不少了，但这本小说读起来依然紧张刺激。除了揭示管理现代IT组织与管理传统工厂的共通之处，书里更强调了&lt;code&gt;以一种全局的视角来重新看待自己的工作环境，和自己在工作中扮演的角色&lt;/code&gt;，并且，其包含的问题分析方法、实践方法也或多或少可用于&lt;code&gt;个人效能的优化&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>贫穷的质感（王梆）</title>
      <link>https://pps43.github.io/posts/notes_on_texture_of_hard_times/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_texture_of_hard_times/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;近日读完《贫穷的质感·王梆的英国观察》（&lt;a href=&#34;https://book.douban.com/subject/35720365/&#34;&gt;豆瓣读书&lt;/a&gt;，&lt;a href=&#34;https://www.goodreads.com/book/show/61069255&#34;&gt;Goodreads&lt;/a&gt;）一书后，将只言片语组合起来作一点记录。此书说了很多英国普通人的事情、社会传统，但相信我们读起来应该不会太陌生。透过诸多生活中的观察，自然引申出养老、医疗、社会制度、逆全球化等话题。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;只言片语&#34;&gt;只言片语&lt;/h2&gt;
&lt;p&gt;英国政府曾推出大量廉租房，老旧了便拿来卖钱。由于是市面价格的一半，非常受炒房客的欢迎。有钱人买来继续出租，租金比原来还要高。但由于政府不再负责修缮，这些房子逐渐变得又贵又脏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>经济机器如何运行（达利欧）</title>
      <link>https://pps43.github.io/posts/how_the_economic_machine_works/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/how_the_economic_machine_works/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文总结自&lt;code&gt;Ray Dalio: How the Economic Machine Works&lt;/code&gt;，&lt;a href=&#34;https://www.youtube.com/watch?v=rFV7wdEX-Mo&#34;&gt;原视频地址&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;核心概念简述&#34;&gt;核心概念简述&lt;/h1&gt;
&lt;h2 id=&#34;什么是交易&#34;&gt;什么是交易&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;买方使用&lt;code&gt;货币、信用（也叫信贷）&lt;/code&gt;向卖方交换&lt;code&gt;商品、服务、金融资产&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;交易首先是由人的天性驱动的。&lt;/li&gt;
&lt;li&gt;买方的支出总额（而不是其他）是&lt;code&gt;经济的驱动力&lt;/code&gt;，所有的经济周期和动力都是交易造成的。&lt;/li&gt;
&lt;li&gt;交易的主体通常有：个人、企业、银行、政府。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;政府如何参与交易&#34;&gt;政府如何参与交易&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;政府其实同时是最大的买方和卖方。&lt;/li&gt;
&lt;li&gt;政府主要由两部分：中央政府，负责收税；中央银行，负责花钱。&lt;/li&gt;
&lt;li&gt;中央银行通过&lt;code&gt;利率&lt;/code&gt;和&lt;code&gt;印钱&lt;/code&gt;控制经济中的货币和信用（信贷数量）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是信贷&#34;&gt;什么是信贷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;信贷也是一种交易。比如你找银行借钱，你是借款人，银行是贷款人。你是交易的卖方，&lt;code&gt;银行是买方&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;这种交易的特殊之处在于：&lt;code&gt;交易是延迟完成的&lt;/code&gt;，即借款人保证将来偿还&lt;code&gt;贷款和利息&lt;/code&gt;，直到那个时候，交易才算完成。&lt;/li&gt;
&lt;li&gt;交易未完成前的状态，即债务。&lt;code&gt;债务是贷款人的资产&lt;/code&gt;，借款人的负债。&lt;/li&gt;
&lt;li&gt;只有交易完成时，这些资产和负债才会消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是价格&#34;&gt;什么是价格&lt;/h2&gt;
&lt;p&gt;$$
价格 = \frac{买方支出总额}{产销总量} =\frac{(货币 + 信贷)} {产销总量}
$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>GP-GPU编程：CUDA介绍</title>
      <link>https://pps43.github.io/posts/cuda_programming_gpgpu/</link>
      <pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/cuda_programming_gpgpu/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文简要介绍了利用GPU进行通用计算的历史和方法，以NVDIA家的CUDA架构为例，介绍GPGPU编程的重要概念和简单实践。希望能够在浩如烟海的网络资料之外，给像我这样的初学者提供一些清晰的参考。CUDA C的学习资料在文末给出，NVDIA的官方文档干净友好，听说社区生态也堪称典范，好感度+1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>我是查理</title>
      <link>https://pps43.github.io/posts/je_suis_charlie/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/je_suis_charlie/</guid>
      <description>&lt;p&gt;更新了下Notepad++后，自动打开了一个文档，一个个单词自动蹦出来……差点吓尿——这是什么鬼？屏幕上的光标终于不动了……是一段话。我这里把原文贴出来：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scientific Thinking? No, 杂谈です</title>
      <link>https://pps43.github.io/posts/thinking_of_scientific_thinking/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_scientific_thinking/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;新学期，和诸位打个照面~既然没有什么干货，不妨先散扯一通，聊聊学习，聊聊 Scientific Thinking，聊聊经济学和通信，等等。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;一个学习能力强、效率高的人，相比常人更经常有意识地思考自己的核心技能是什么。从专业上来看，物理出身的人、经济出身的人、通信出身的人、法律出身的人等等——其专业提供其的认识论和方法论都不同。可能经济出身的人习惯于把一个现象通过供需平衡、边际成本、效率和公平等角度理解；搞通信的习惯于通过信息量、统计量、系统输入输出、相关性等角度来分析；搞物理的可能先@%^&amp;amp;$!#……“不论以后干什么，珍惜你的专业背景”这句话的含义就是不要舍弃专业带给你的这话总工具和视角。&lt;/p&gt;</description>
    </item>
    <item>
      <title>二范数下几个问题的统一解释</title>
      <link>https://pps43.github.io/posts/thinking_of_norm2/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_norm2/</guid>
      <description>&lt;p&gt;范数、内积空间的概念这里不做赘述，只点几个要点。&lt;/p&gt;
&lt;p&gt;粗糙的说，对于V(F)空间，定义内积为一种将两个属于此集合V的元素与一个来自数域F的元素对应起来，并且满足一些抽象但自然的性质（不举）。为了方便将两个元素的内积记为：\(&amp;lt; \bf{a,b} &amp;gt; ，\bf{a,b}\) 属于V。&lt;/p&gt;</description>
    </item>
    <item>
      <title>信道仿真模型 WINNER II</title>
      <link>https://pps43.github.io/posts/using_winner2_channel_model/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_winner2_channel_model/</guid>
      <description>&lt;p&gt;在&amp;quot;&lt;a href=&#34;https://pps43.github.io/posts/using_scm_channel_model/&#34;&gt;信道仿真模型 3GPP-SCM&lt;/a&gt;&amp;ldquo;一文中提到了WINNER模型是诺西牵头搞的原3GPP SCM的增强版，关于WINNER模型的官方介绍参见：&lt;a href=&#34;http://www.ist-winner.org/&#34;&gt;http://www.ist-winner.org/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>信道仿真模型 3GPP-SCM</title>
      <link>https://pps43.github.io/posts/using_scm_channel_model/</link>
      <pubDate>Tue, 11 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/using_scm_channel_model/</guid>
      <description>&lt;p&gt;在&amp;quot;&lt;a href=&#34;https://pps43.github.io/posts/thinking_of_fading_channel_models/&#34;&gt;衰落信道小议&lt;/a&gt;&amp;ldquo;一文中提到了MIMO信道的建模。好的信道模型是以下三个标准的折中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准确性。&lt;/li&gt;
&lt;li&gt;计算可行。&lt;/li&gt;
&lt;li&gt;一般性（或者说灵活性）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3GPP提出的&lt;code&gt;SCM&lt;/code&gt;（Spatial Channel Model）是符合以上标准的、基于地理的概率模型（Geometry Based Stochastic Model），即使用若干传播路径进行叠加，每条路径的强度和延迟符合一定的随机分布。SCM被WP5小组采用研究室外的MIMO信道，后经其手拓展成SCM-E（E for Extension）模型，再后来WP5还是不满意，便另起炉灶开始了&lt;code&gt;WINNER&lt;/code&gt;系列信道模型的制定及其实现，这是后话，放在&lt;a href=&#34;https://pps43.github.io/posts/using_winner2_channel_model/&#34;&gt;下一篇&lt;/a&gt;里说。&lt;/p&gt;</description>
    </item>
    <item>
      <title>衰落信道建模小议</title>
      <link>https://pps43.github.io/posts/thinking_of_fading_channel_models/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_fading_channel_models/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;无线通信中对信道建模一直是一件比较头疼的事。就现在无线通信物理层最活跃的Massive MIMO方向来说，有效的统计信道模型尚未有组织提出，可见对信道建模，不存在一劳永逸的方法。这里只谈像我这样的初学者入门时，学习衰落信道过程中的困惑和思考。虽然叫“小议”，就是想写尽量通俗，但估计条理还是会有点乱~&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cybernetics二三事</title>
      <link>https://pps43.github.io/posts/notes_on_cybernetics/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/notes_on_cybernetics/</guid>
      <description>&lt;p&gt;今天老师上课提到“Cybernetics”这个词，中文翻译为：控制论。控制论的开山鼻祖是Wiener（&lt;a href=&#34;https://pps43.github.io/posts/thinking_of_filter/&#34;&gt;上篇文章&lt;/a&gt;
提到过他）。
我就好奇，&lt;code&gt;Cybernetics&lt;/code&gt;怎么能就翻译成“控制论”了呢？去图书馆查阅了一番，才从第一批引进此书的老一辈科技工作者的文字中，了解到了其中的曲折。&lt;/p&gt;</description>
    </item>
    <item>
      <title>谈谈滤波</title>
      <link>https://pps43.github.io/posts/thinking_of_filter/</link>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_filter/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;摸清背景，理清思路，探讨意义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;首先谈谈我关于滤波的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;频域&lt;/strong&gt;内对信号中某些频率分量进行衰减。关键词：低通、高通。典型的场景是将一段音乐中不同频段的声音分别抽取出来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间域&lt;/strong&gt;内对不同尺度的细节进行处理。关键词：图像处理，滤镜。典型的场景是将一张被关在笼子里的老虎的照片“还原”出被笼子挡住的部分，有点透视的意味。&lt;/li&gt;
&lt;li&gt;已经超出了两个字的字面意思，甚至也超出了频域、空域的范畴，进入了&lt;strong&gt;统计的领域&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;扑面而来的是维纳滤波。先说说维纳其人。&lt;/p&gt;</description>
    </item>
    <item>
      <title>5G时代：OFDM没有遗言</title>
      <link>https://pps43.github.io/posts/thinking_of_5g_ofdm/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      <guid>https://pps43.github.io/posts/thinking_of_5g_ofdm/</guid>
      <description>&lt;p&gt;本篇的话题是——5G：OFDM没有遗言。OFDM作为4G多载波技术最大的功臣，在10多年来得到了疯狂的应用和追捧，在很多领域展现了其优越的性能和简约之美，可谓风光无限。研究者们痴迷它、学生们膜拜它、工程师们只要它。如今，我的主要工作却是质疑OFDM在5G场景中是否合适，并尝试寻找继承者，探索更适合5G场景的多载波传输解决方案。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
